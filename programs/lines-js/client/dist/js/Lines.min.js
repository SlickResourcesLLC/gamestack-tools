"use strict";function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function Lines(){this.each=function(obj,callback){for(var x in obj)callback(x,obj[x])}}var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj},_createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),VectorBounds=Rectangle,Curves={linearNone:function(t){return t},easeInQuadratic:function(t){return t*t},easeOutQuadratic:function(t){return t*(2-t)},easeInOutQuadratic:function(t){return t<.5?2*t*t:-1+(4-2*t)*t},easeInCubic:function(t){return t*t*t},easeOutCubic:function(t){return--t*t*t+1},easeInOutCubic:function(t){return t<.5?4*t*t*t:(t-1)*(2*t-2)*(2*t-2)+1},easeInQuartic:function(t){return t*t*t*t},easeOutQuartic:function(t){return 1- --t*t*t*t},easeInOutQuartic:function(t){return t<.5?8*t*t*t*t:1-8*--t*t*t*t},easeInQuintic:function(t){return t*t*t*t*t},easeOutQuintic:function(t){return 1+--t*t*t*t*t},easeInOutQuintic:function(t){return t<.5?16*t*t*t*t*t:1+16*--t*t*t*t*t}};Gamestack.Curves=Curves;var Shapes={circle:function(radius,freq){return{radius:radius,points:[],fill:function(center,freq){}}},square:function(s,freq){return console.error("STILL NEED TO BUILD THIS SQUARE IN GS-API"),{size:new Vector(s,s),width:w,height:h,freq:freq,points:[],fill:function(start,freq){}}},rect:function(w,h,freq){return console.error("STILL NEED TO BUILD THIS TRIANGLE"),{size:new Vector(w,h),width:w,height:h,freq:freq,points:[],fill:function(start,freq){}}},triangle:function(base,h,freq){return console.error("STILL NEED TO BUILD THIS TRIANGLE"),{base:base,height:height,freq:freq,points:[],fill:function(start,freq){}}}};Gamestack.Shapes=Shapes;var Line=function(){function Line(){var args=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};_classCallCheck(this,Line),this.curve_string=args.curve_string||"Linear_None",this.curve=this.get_curve_from_string(this.curve_string),this.motion_curve=args.motion_curve||TWEEN.Easing.Linear.None,"function"==typeof args.curve&&(this.curve=args.curve),this.points=[],this.position=args.position||new Vector,this.is_highlighted=args.is_highlighted||!1,this.offset=args.offset||new Vector,this.pointDist=5,this.size=args.size||new Vector,this.rotation=args.rotation||0,this.iterations=1,this.growth=args.growth||1.2,this.curve_options=Curves}return _createClass(Line,[{key:"Iterations",value:function(n){return this.iterations=n,this}},{key:"Growth",value:function(n){return this.growth=n,this}},{key:"Pos",value:function(p){return this.position=p,this}},{key:"PointDisp",value:function(num){return this.minPointDist=num,this}},{key:"Curve",value:function(c){return this.curve=c,this.curve_string=this.get_curve_string(c),this}},{key:"Duration",value:function(d){return this.duration=d,this}},{key:"Rotation",value:function(r){return this.rotation=r,this}},{key:"next",value:function(position){for(var found=!1,x=0;x<this.points.length;x++){if(position.equals(this.points[x])&&x<this.points.length-1)return found=!0,new Vector(this.points[x+1]);if(x==this.points.length-1&&!found)return new Vector(this.points[0])}}},{key:"get_curve_from_string",value:function(str){for(var x in this.curve_options)if(x.toLowerCase()==str.toLowerCase().replace("_",""))return this.curve_options[x]}},{key:"get_curve_string",value:function(c){for(var x in this.curve_options)if(this.curve_options[x]==c)return x}},{key:"getGraphCanvas",value:function(curveCall,existing_canvas){var canvas=existing_canvas||document.createElement("canvas");canvas.style.position="relative",canvas.id="curve-display",canvas.setAttribute("class","motion-curve"),canvas.width=180,canvas.height=100,canvas.style.background="black";var context=canvas.getContext("2d");context.fillStyle="rgb(0,0,0)",context.fillRect(0,0,180,100),context.lineWidth=.5,context.strokeStyle="rgb(230,230,230)",context.beginPath(),context.moveTo(0,20),context.lineTo(180,20),context.moveTo(0,80),context.lineTo(180,80),context.closePath(),context.stroke(),context.lineWidth=2,context.strokeStyle="rgb(255,127,127)";var position={x:0,y:80},position_old={x:0,y:80};this.test_graph_size=new Vector(185,60);var points=this.get_line_segment(this.test_graph_size,5,curveCall);for(var x in points){var position=new Vector(points[x].x,this.test_graph_size.y+20-points[x].y);context.beginPath(),context.moveTo(position_old.x,position_old.y),context.lineTo(position.x,position.y),context.closePath(),context.stroke(),position_old.x=position.x,position_old.y=position.y}return canvas}},{key:"get_line_segment",value:function(size,pointDist,curveCall){if(!size||!pointDist)return 0;var points=[],current_point=new Vector(0,0,0),position=new Vector(current_point),target=new Vector(position.add(size)),start=new Vector(position),curveMethod=curveCall,ptrack=new Vector(start);for(position.x=position.x;position.x<target.x;position.x+=1){var dist=position.sub(start),pct=dist.x/size.x;if(console.log(pct),position.y=Math.round(curveMethod(pct)*size.y),ptrack.trig_distance_xy(position)>=pointDist){var p=new Vector(Gamestack.GeoMath.rotatePointsXY(position.x,position.y,0));points.push(p),current_point=new Vector(position),ptrack=new Vector(current_point)}}return points}},{key:"fill",value:function(size,pointDist){if(!size||!pointDist)return 0;this.size=size,this.pointDist=pointDist;this.points=[];for(var current_point=new Vector(this.position),x=0;x<=this.iterations;x++){var position=new Vector(current_point),target=new Vector(position.add(size)),start=new Vector(position),curveMethod=this.curve;new Vector(start);for(position.x=position.x;position.x<target.x;position.x+=1){var dist=position.sub(start),pct=dist.x/size.x;if(position.y=start.y+Math.round(curveMethod(pct)*size.y),current_point.trig_distance_xy(position)>=this.pointDist){var p=new Vector(Gamestack.GeoMath.rotatePointsXY(position.x,position.y,this.rotation));this.points.push(p),current_point=new Vector(position)}}size=size.mult(this.growth)}}},{key:"transpose",value:function(origin){for(var t_points=[],x=0;x<this.points.length;x++)t_points.push(this.points[x].add(origin));return t_points}},{key:"add_segment",value:function(next_segment,offset){for(var x=0;x<next_segment.length;x++)next_segment[x]=new Vector(next_segment[x]).add(offset),this.points.push(next_segment[x])}},{key:"get_flipped_segment",value:function(points){for(var t_points=points.slice(),t_len=t_points.length,x=0;x<points.length;x++)t_points[t_len-x].x=points[x].x;return t_points}},{key:"Highlight",value:function(origin,ctx){ctx=ctx||Gamestack.ctx;for(var x in this.points){var point=origin.add(this.points[x]).sub(Gamestack.point_highlighter.size.mult(.5)),dist=point.sub(Gamestack.point_highlighter.position),d=Math.sqrt(dist.x*dist.x+dist.y*dist.y);d>=10&&(Gamestack.point_highlighter.position=new Vector2(origin.add(this.points[x]).sub(Gamestack.point_highlighter.size.mult(.5)))),Canvas.draw(Gamestack.point_highlighter,ctx)}return this}}]),Line}(),GeoMath={rotatePointsXY:function(x,y,angle){var theta=angle*Math.PI/180,point={};return point.x=x*Math.cos(theta)-y*Math.sin(theta),point.y=x*Math.sin(theta)+y*Math.cos(theta),point.z=0,point}};Gamestack.GeoMath=GeoMath;var Vector=function(){function Vector(x,y,z,r){return _classCallCheck(this,Vector),"object"==("undefined"==typeof x?"undefined":_typeof(x))&&x.hasOwnProperty("x")&&x.hasOwnProperty("y")?(this.x=x.x,this.y=x.y,this.z=x.z||0,null==this.z&&(this.z=0),this):(null==z&&(z=0),this.x=x,this.y=y,this.z=z,void(this.r=r))}return _createClass(Vector,[{key:"sub",value:function(v){return"number"==typeof v&&(v={x:v,y:v,z:v}),new Vector(this.x-v.x,this.y-v.y,this.z-v.z)}},{key:"add",value:function(v){return"number"==typeof v&&(v={x:v,y:v,z:v}),new Vector(this.x+v.x,this.y+v.y,this.z+v.z)}},{key:"mult",value:function(v){return"number"==typeof v&&(v={x:v,y:v,z:v}),new Vector(this.x*v.x,this.y*v.y,this.z*v.z)}},{key:"div",value:function(v){return"number"==typeof v&&(v={x:v,y:v,z:v}),new Vector(this.x/v.x,this.y/v.y,this.z/v.z)}},{key:"round",value:function(){return new Vector(Math.round(this.x),Math.round(this.y),Math.round(this.z))}},{key:"floor",value:function(){return new Vector(Math.floor(this.x),Math.floor(this.y),Math.floor(this.z))}},{key:"ceil",value:function(){return new Vector(Math.ceil(this.x),Math.ceil(this.y),Math.ceil(this.z))}},{key:"equals",value:function(v){return this.x==v.x&&this.y==v.y&&this.z==v.z}},{key:"trig_distance_xy",value:function(v){var dist=this.sub(v);return Math.sqrt(dist.x*dist.x+dist.y*dist.y)}},{key:"diff",value:function(){}},{key:"abs_diff",value:function(){}},{key:"is_between",value:function(v1,v2){return this.x>=v1.x&&this.x<=v2.x&&this.y>=v1.y&&this.y<=v2.y&&this.z>=v1.z&&this.z<=v2.z}}]),Vector}(),Vector3=Vector,Pos=Vector,Size=Vector,Position=Vector,Vector2=Vector,Rotation=Vector;Gamestack.Vector=Vector;