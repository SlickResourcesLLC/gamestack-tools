{"version":3,"sources":["../../../ecma/obj/Sprite.js"],"names":["__gameInstance","Sprite","name","description","args","active","_spr","Quazar","each","ix","item","type","$Q","getArg","animations","motions","__inst","id","setid","sounds","image","GameImage","size","Vector2","position","Vector3","collision_bounds","VectorBounds","rotation","selected_animation","selected_motionstack","selected_physics","onGround","clasticTo","damagedBy","speed","accel","rot_speed","rot_accel","actionlists","$","Sound","Motion","Animation","Date","getUTCMilliseconds","w","h","x","y","sprite","Collision","spriteRectanglesCollide","options","prep_key","spread","angleSpread","total","totalBullets","numberBullets","animation","bullet","duration","screenDuration","isAtPlay","event_arg","alert","setAnimation","evt","event_args_list","length","max","assertSpeed","max_y","hasOwnProperty","switch","extras","key","rate","anime","log","file_path","getJSON","data","GameObjects","init","BlockTile","sprites"],"mappings":"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","file":"Sprite.js","sourcesContent":["let __gameInstance = __gameInstance || {};\r\n\r\n\r\nclass Sprite {\r\n    constructor(name, description, args) {\r\n\r\n        this.name = name || \"__\";\r\n\r\n        this.description = description || \"__\";\r\n\r\n        this.active = true;\r\n\r\n        if(typeof(name) == 'object')\r\n        {\r\n            args = name;\r\n        }\r\n\r\n        var _spr = this;\r\n\r\n        Quazar.each(args, function (ix, item) {\r\n\r\n            if (ix !== 'parent') {\r\n                _spr[ix] = item;\r\n            }\r\n\r\n\r\n        });\r\n\r\n        this.type = $Q.getArg(args, 'type', 'basic');\r\n\r\n        this.animations = $Q.getArg(args, 'animations', []);\r\n\r\n        this.motions = $Q.getArg(args, 'motions', []);\r\n\r\n        let __inst = this;\r\n\r\n\r\n        this.id = $Q.getArg(args, 'id',  this.setid());\r\n\r\n        this.sounds = $Q.getArg(args, 'sounds', []);\r\n\r\n        this.image = $Q.getArg(args, 'image', new GameImage($Q.getArg(args, 'src', false)));\r\n\r\n        this.size = $Q.getArg(args, 'size', new Vector2(100, 100));\r\n\r\n        this.position = $Q.getArg(args, 'position', new Vector3(0, 0, 0));\r\n\r\n\r\n\r\n        this.collision_bounds = $Q.getArg(args, 'collision_bounds', new VectorBounds(new Vector3(0, 0, 0), new Vector3(0, 0, 0)));\r\n\r\n        this.rotation = $Q.getArg(args, 'rotation', new Vector3(0, 0, 0));\r\n\r\n        this.selected_animation = {};\r\n\r\n        this.selected_motionstack = {};\r\n\r\n        this.selected_physics = {};\r\n\r\n        this.onGround = false;\r\n\r\n        this.clasticTo = []; //an array of sprite types\r\n\r\n\r\n        this.damagedBy = []; //an array of animation types\r\n\r\n\r\n        this.speed =  $Q.getArg(args, 'speed', new Vector3(0, 0, 0)); //store constant speed value\r\n\r\n        this.accel =  $Q.getArg(args, 'accel', new Vector3(0, 0, 0)); //store constant accel value\r\n\r\n\r\n        this.rot_speed =  $Q.getArg(args, 'rot_speed', new Vector3(0, 0, 0));\r\n\r\n        this.rot_accel =  $Q.getArg(args, 'rot_accel', new Vector3(0, 0, 0));\r\n\r\n        this.actionlists =  $Q.getArg(args, 'actionlists', []);\r\n\r\n\r\n\r\n        $.each(this.sounds , function(ix, item){\r\n\r\n            __inst.sounds[ix] = new Sound(item);\r\n\r\n        });\r\n\r\n\r\n        $.each(this.motions, function(ix, item){\r\n\r\n            __inst.motions[ix] = new Motion(item);\r\n\r\n        });\r\n\r\n\r\n        $.each(this.animations, function(ix, item){\r\n\r\n            __inst.animations[ix] = new Animation(item);\r\n\r\n        });\r\n\r\n    }\r\n\r\n    setid()\r\n     {\r\n         return new Date().getUTCMilliseconds();\r\n\r\n     }\r\n\r\n     get_id()\r\n     {\r\n\r\n         return this.id;\r\n     }\r\n\r\n    onScreen(w, h) {\r\n        return this.position.x + this.size.x >= 0 && this.position.x < w\r\n            && this.position.y + this.size.y >= 0 && this.position.y < h;\r\n\r\n    }\r\n\r\n    type_options()\r\n    {\r\n\r\n        return[\r\n\r\n            'player',\r\n            'enemy',\r\n            'powerup',\r\n            'attachment',\r\n            'projectile'\r\n\r\n        ]\r\n\r\n    }\r\n\r\n    update() {}\r\n\r\n    def_update() {\r\n\r\n        for(var x in this.speed)\r\n        {\r\n\r\n            if(this.speed[x] > 0 || this.speed[x] < 0)\r\n            {\r\n\r\n                this.position[x] += this.speed[x];\r\n\r\n            }\r\n\r\n        }\r\n\r\n        for(var x in this.accel)\r\n        {\r\n\r\n            if(this.accel[x] > 0 || this.accel[x] < 0)\r\n            {\r\n\r\n                this.speed[x] += this.accel[x];\r\n\r\n            }\r\n\r\n        }\r\n\r\n        for(var x in this.rot_speed)\r\n        {\r\n\r\n            if(this.rot_speed[x] > 0 || this.rot_speed[x] < 0)\r\n            {\r\n\r\n                this.rotation[x] += this.rot_speed[x];\r\n\r\n            }\r\n\r\n\r\n        }\r\n\r\n        for(var x in this.rot_accel)\r\n        {\r\n\r\n\r\n            if(this.rot_accel[x] > 0 || this.rot_accel[x] < 0)\r\n            {\r\n\r\n                this.rot_speed[x] += this.rot_accel[x];\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    collidesRectangular(sprite)\r\n    {\r\n\r\n        return Quazar.Collision.spriteRectanglesCollide(sprite);\r\n\r\n    }\r\n\r\n    shoot(options) {\r\n        //character shoots an animation\r\n\r\n\r\n        this.prep_key = 'shoot';\r\n\r\n\r\n        let spread = options.spread || options.angleSpread || false;\r\n\r\n        let total = options.total || options.totalBullets || options.numberBullets || false;\r\n\r\n        let animation = options.bullet || options.animation || false;\r\n\r\n        let duration = options.duration || options.screenDuration || false;\r\n\r\n        let speed = options.speed || false;\r\n\r\n        if (__gameInstance.isAtPlay) {\r\n\r\n\r\n        }\r\n        else {\r\n\r\n            this.event_arg(this.prep_key, '_', options);\r\n\r\n        }\r\n\r\n\r\n        return this;\r\n\r\n\r\n    }\r\n\r\n    allow(options)\r\n    {\r\n        this.prep_key = 'animate';\r\n\r\n\r\n        this.event_arg(this.prep_key, '_', options);\r\n\r\n\r\n    }\r\n\r\n    animate(animation) {\r\n\r\n        alert('calling animation');\r\n\r\n\r\n\r\n        if (__gameInstance.isAtPlay) {\r\n\r\n            this.setAnimation(animation);\r\n\r\n            return this;\r\n\r\n        }\r\n        else {\r\n            var evt = __gameInstance.event_args_list[__gameInstance.event_args_list.length - 1];\r\n\r\n            evt.animation = animation;\r\n\r\n            return this;\r\n\r\n        }\r\n\r\n        return this;\r\n\r\n    }\r\n\r\n    velocityY(accel, max) {\r\n\r\n        this.assertSpeed();\r\n\r\n        if(this.speed.y < max.y)\r\n        {\r\n            this.speed.y += accel;\r\n\r\n        }\r\n\r\n        this.position.y += this.speed.y;\r\n\r\n\r\n\r\n    }\r\n\r\n    collide(item)\r\n    {\r\n\r\n        var max_y = item.max ? item.max.y : item.position.y;\r\n\r\n        if(this.position.y + this.size.y >= max_y)\r\n        {\r\n\r\n            this.position.y = max_y - this.size.y;\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    assertSpeed() {\r\n        if (!this.speed) {\r\n\r\n            this.speed = new Vector3(0, 0, 0);\r\n\r\n        }\r\n\r\n    }\r\n\r\n    swing()\r\n    {\r\n\r\n\r\n    }\r\n\r\n\r\n    accel(options) {\r\n\r\n        this.prep_key = 'accel';\r\n\r\n        //targeting position\r\n\r\n        if (__gameInstance.isAtPlay) {\r\n\r\n            this.assertSpeed();\r\n\r\n            if(options.hasOwnProperty('switch') && this[options.switch] !== true)\r\n            {\r\n                return false;\r\n\r\n            }\r\n            else\r\n            {\r\n\r\n              //  this[options.switch] = false;\r\n\r\n            }\r\n\r\n            if(options.extras && options.speed !== 0)\r\n            {\r\n\r\n                for(var x in options.extras)\r\n                {\r\n                    this[x] = options.extras[x];\r\n\r\n                }\r\n            }\r\n\r\n            if(this.speed[options.key] < options.speed)\r\n            {\r\n\r\n                this.speed[options.key] += options.accel;\r\n\r\n            }\r\n            else if(this.speed[options.key] > options.speed)\r\n            {\r\n\r\n                this.speed[options.key] -= options.accel;\r\n\r\n            }\r\n            else if(options.speed == 0)\r\n            {\r\n                this.speed[options.key] = 0;\r\n\r\n            }\r\n\r\n\r\n        }\r\n        else {\r\n\r\n\r\n            this.event_arg(this.prep_key, '_', options);\r\n\r\n        }\r\n\r\n        return this;\r\n\r\n    }\r\n\r\n    deccelX(rate) {\r\n        if (typeof(rate) == 'object') {\r\n\r\n            rate = rate.rate;\r\n\r\n        }\r\n\r\n        if (this.speed['x'] > rate) {\r\n            this.speed['x'] -= rate;\r\n\r\n        }\r\n        else if (this.speed['x'] < rate) {\r\n            this.speed['x'] += rate;\r\n\r\n        }\r\n        else\r\n        {\r\n\r\n            this.speed['x'] = 0;\r\n\r\n        }\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    setAnimation(anime) {\r\n\r\n        this.animations['default'] = anime;\r\n\r\n        this.selected_animation = anime;\r\n\r\n        Quazar.log('declared default animation');\r\n\r\n        return this;\r\n\r\n    }\r\n\r\n    defaultAnimation(anime) {\r\n\r\n        this.animations['default'] = anime;\r\n\r\n        Quazar.log('declared default animation');\r\n\r\n        return this;\r\n\r\n    }\r\n\r\n\r\n    fromFile(file_path)\r\n    {\r\n        var __inst = this;\r\n\r\n        $.getJSON(file_path, function(data){\r\n\r\n            __inst = new Sprite(data);\r\n\r\n        });\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nlet GameObjects = {\r\n\r\n  init:function(){\r\n\r\n      let BlockTile = new Sprite();\r\n\r\n\r\n\r\n\r\n      this.sprites = [];\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n};\r\n\r\n\r\n\r\n"]}