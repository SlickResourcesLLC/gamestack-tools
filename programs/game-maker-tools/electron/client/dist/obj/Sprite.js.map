{"version":3,"sources":["../../../ecma/obj/Sprite.js"],"names":["__gameInstance","Stats","args","s","create_stats","x","Sprite","name","description","active","_spr","Quazar","each","ix","item","type","$Q","getArg","animations","motions","__inst","object_id","sounds","image","GameImage","size","Vector2","position","Vector3","collision_bounds","VectorBounds","rotation","selected_animation","selected_motionstack","selected_physics","onGround","clasticTo","damagedBy","speed","accel","rot_speed","rot_accel","actionlists","stats","id","setid","$","Sound","Motion","Animation","Date","getUTCMilliseconds","w","h","y","sprite","Collision","spriteRectanglesCollide","options","prep_key","spread","angleSpread","total","totalBullets","numberBullets","animation","bullet","duration","screenDuration","isAtPlay","event_arg","alert","setAnimation","evt","event_args_list","length","max","assertSpeed","max_y","hasOwnProperty","switch","extras","key","rate","controller_index","controller","__sprite","object","ctrl","anime","log","normalKey","images","objects","Array","_inst","__collections","ic","coll","obj","__typeProfile","constructor","list","push","file_path","getJSON","data"],"mappings":"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","file":"Sprite.js","sourcesContent":["let __gameInstance = __gameInstance || {};\r\n\r\n\r\nclass Stats {\r\n\r\n    constructor(args) {\r\n\r\n        var s = this.create_stats;\r\n\r\n        for(var x in s)\r\n        {\r\n            this[x] = s[x];\r\n\r\n        }\r\n\r\n        if(typeof(args) == 'object') {\r\n\r\n            for (var x in args) {\r\n                this[x] = args[x];\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nclass Sprite {\r\n    constructor(name, description, args) {\r\n\r\n        this.name = name || \"__\";\r\n\r\n        this.description = description || \"__\";\r\n\r\n        this.active = true;\r\n\r\n        if(typeof(name) == 'object')\r\n        {\r\n            args = name;\r\n        }\r\n\r\n        var _spr = this;\r\n\r\n        Quazar.each(args, function (ix, item) {\r\n\r\n            if (ix !== 'parent') {\r\n                _spr[ix] = item;\r\n            }\r\n\r\n\r\n        });\r\n\r\n        this.type = $Q.getArg(args, 'type', 'basic');\r\n\r\n        this.animations = $Q.getArg(args, 'animations', []);\r\n\r\n        this.motions = $Q.getArg(args, 'motions', []);\r\n\r\n        let __inst = this;\r\n\r\n        this.object_id =$Q.getArg(args, 'object_id', '__blank');\r\n\r\n        this.sounds = $Q.getArg(args, 'sounds', []);\r\n\r\n        this.image = $Q.getArg(args, 'image', new GameImage($Q.getArg(args, 'src', false)));\r\n\r\n        this.size = $Q.getArg(args, 'size', new Vector2(100, 100));\r\n\r\n        this.position = $Q.getArg(args, 'position', new Vector3(0, 0, 0));\r\n\r\n\r\n\r\n        this.collision_bounds = $Q.getArg(args, 'collision_bounds', new VectorBounds(new Vector3(0, 0, 0), new Vector3(0, 0, 0)));\r\n\r\n        this.rotation = $Q.getArg(args, 'rotation', new Vector3(0, 0, 0));\r\n\r\n        this.selected_animation = {};\r\n\r\n        this.selected_motionstack = {};\r\n\r\n        this.selected_physics = {};\r\n\r\n        this.onGround = false;\r\n\r\n\r\n        this.clasticTo = []; //an array of sprite types\r\n\r\n\r\n        this.damagedBy = []; //an array of animation types\r\n\r\n\r\n        this.speed =  $Q.getArg(args, 'speed', new Vector3(0, 0, 0)); //store constant speed value\r\n\r\n        this.accel =  $Q.getArg(args, 'accel', new Vector3(0, 0, 0)); //store constant accel value\r\n\r\n\r\n        this.rot_speed =  $Q.getArg(args, 'rot_speed', new Vector3(0, 0, 0));\r\n\r\n        this.rot_accel =  $Q.getArg(args, 'rot_accel', new Vector3(0, 0, 0));\r\n\r\n        this.actionlists =  $Q.getArg(args, 'actionlists', []);\r\n\r\n        this.stats = $Q.getArg(args, 'stats', new Stats());\r\n\r\n        this.id = this.setid();\r\n\r\n        $.each(this.sounds, function(ix, item){\r\n\r\n            __inst.sounds[ix] = new Sound(item);\r\n\r\n        });\r\n\r\n\r\n        $.each(this.motions, function(ix, item){\r\n\r\n            __inst.motions[ix] = new Motion(item);\r\n\r\n        });\r\n\r\n\r\n        $.each(this.animations, function(ix, item){\r\n\r\n            __inst.animations[ix] = new Animation(item);\r\n\r\n        });\r\n\r\n    }\r\n\r\n    setid()\r\n     {\r\n         return new Date().getUTCMilliseconds();\r\n\r\n     }\r\n\r\n     get_id()\r\n     {\r\n\r\n         return this.id;\r\n     }\r\n\r\n    onScreen(w, h) {\r\n        return this.position.x + this.size.x >= 0 && this.position.x < w\r\n            && this.position.y + this.size.y >= 0 && this.position.y < h;\r\n\r\n    }\r\n\r\n    type_options()\r\n    {\r\n\r\n        return[\r\n\r\n            'player',\r\n            'enemy',\r\n            'powerup',\r\n            'attachment',\r\n            'projectile'\r\n\r\n        ]\r\n\r\n    }\r\n\r\n    update() {}\r\n\r\n    def_update() {\r\n\r\n        for(var x in this.speed)\r\n        {\r\n\r\n            if(this.speed[x] > 0 || this.speed[x] < 0)\r\n            {\r\n\r\n                this.position[x] += this.speed[x];\r\n\r\n            }\r\n\r\n        }\r\n\r\n        for(var x in this.accel)\r\n        {\r\n\r\n            if(this.accel[x] > 0 || this.accel[x] < 0)\r\n            {\r\n\r\n                this.speed[x] += this.accel[x];\r\n\r\n            }\r\n\r\n        }\r\n\r\n        for(var x in this.rot_speed)\r\n        {\r\n\r\n            if(this.rot_speed[x] > 0 || this.rot_speed[x] < 0)\r\n            {\r\n\r\n                this.rotation[x] += this.rot_speed[x];\r\n\r\n            }\r\n\r\n\r\n        }\r\n\r\n        for(var x in this.rot_accel)\r\n        {\r\n\r\n\r\n            if(this.rot_accel[x] > 0 || this.rot_accel[x] < 0)\r\n            {\r\n\r\n                this.rot_speed[x] += this.rot_accel[x];\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    collidesRectangular(sprite)\r\n    {\r\n\r\n        return Quazar.Collision.spriteRectanglesCollide(sprite);\r\n\r\n    }\r\n\r\n    shoot(options) {\r\n        //character shoots an animation\r\n\r\n\r\n        this.prep_key = 'shoot';\r\n\r\n\r\n        let spread = options.spread || options.angleSpread || false;\r\n\r\n        let total = options.total || options.totalBullets || options.numberBullets || false;\r\n\r\n        let animation = options.bullet || options.animation || false;\r\n\r\n        let duration = options.duration || options.screenDuration || false;\r\n\r\n        let speed = options.speed || false;\r\n\r\n        if (__gameInstance.isAtPlay) {\r\n\r\n\r\n        }\r\n        else {\r\n\r\n            this.event_arg(this.prep_key, '_', options);\r\n\r\n        }\r\n\r\n\r\n        return this;\r\n\r\n\r\n    }\r\n\r\n    allow(options)\r\n    {\r\n        this.prep_key = 'animate';\r\n\r\n\r\n        this.event_arg(this.prep_key, '_', options);\r\n\r\n\r\n    }\r\n\r\n    animate(animation) {\r\n\r\n        alert('calling animation');\r\n\r\n\r\n\r\n        if (__gameInstance.isAtPlay) {\r\n\r\n            this.setAnimation(animation);\r\n\r\n            return this;\r\n\r\n        }\r\n        else {\r\n            var evt = __gameInstance.event_args_list[__gameInstance.event_args_list.length - 1];\r\n\r\n            evt.animation = animation;\r\n\r\n            return this;\r\n\r\n        }\r\n\r\n        return this;\r\n\r\n    }\r\n\r\n    velocityY(accel, max) {\r\n\r\n        this.assertSpeed();\r\n\r\n        if(this.speed.y < max.y)\r\n        {\r\n            this.speed.y += accel;\r\n\r\n        }\r\n\r\n        this.position.y += this.speed.y;\r\n\r\n\r\n\r\n    }\r\n\r\n    collide(item)\r\n    {\r\n\r\n        var max_y = item.max ? item.max.y : item.position.y;\r\n\r\n        if(this.position.y + this.size.y >= max_y)\r\n        {\r\n\r\n            this.position.y = max_y - this.size.y;\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    assertSpeed() {\r\n        if (!this.speed) {\r\n\r\n            this.speed = new Vector3(0, 0, 0);\r\n\r\n        }\r\n\r\n    }\r\n\r\n    swing()\r\n    {\r\n\r\n\r\n    }\r\n\r\n\r\n    accel(options) {\r\n\r\n        this.prep_key = 'accel';\r\n\r\n        //targeting position\r\n\r\n        if (__gameInstance.isAtPlay) {\r\n\r\n            this.assertSpeed();\r\n\r\n            if(options.hasOwnProperty('switch') && this[options.switch] !== true)\r\n            {\r\n                return false;\r\n\r\n            }\r\n            else\r\n            {\r\n\r\n              //  this[options.switch] = false;\r\n\r\n            }\r\n\r\n            if(options.extras && options.speed !== 0)\r\n            {\r\n\r\n                for(var x in options.extras)\r\n                {\r\n                    this[x] = options.extras[x];\r\n\r\n                }\r\n            }\r\n\r\n            if(this.speed[options.key] < options.speed)\r\n            {\r\n\r\n                this.speed[options.key] += options.accel;\r\n\r\n            }\r\n            else if(this.speed[options.key] > options.speed)\r\n            {\r\n\r\n                this.speed[options.key] -= options.accel;\r\n\r\n            }\r\n            else if(options.speed == 0)\r\n            {\r\n                this.speed[options.key] = 0;\r\n\r\n            }\r\n\r\n\r\n        }\r\n        else {\r\n\r\n\r\n            this.event_arg(this.prep_key, '_', options);\r\n\r\n        }\r\n\r\n        return this;\r\n\r\n    }\r\n\r\n    deccelX(rate) {\r\n        if (typeof(rate) == 'object') {\r\n\r\n            rate = rate.rate;\r\n\r\n        }\r\n\r\n        if (this.speed['x'] > rate) {\r\n            this.speed['x'] -= rate;\r\n\r\n        }\r\n        else if (this.speed['x'] < rate) {\r\n            this.speed['x'] += rate;\r\n\r\n        }\r\n        else\r\n        {\r\n\r\n            this.speed['x'] = 0;\r\n\r\n        }\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    on(options) {\r\n\r\n\r\n        let controller_index = options.controller || false;\r\n\r\n        let __sprite = this;\r\n\r\n        var evt = __gameInstance.event_args_list[__gameInstance.event_args_list.length - 1];\r\n\r\n        evt.object = __sprite;\r\n\r\n        evt.ctrl = options.ctrl;\r\n\r\n        for (var x in options) {\r\n\r\n\r\n            evt.args[x] = options[x];\r\n\r\n        }\r\n\r\n       // alert('event done');\r\n    }\r\n\r\n\r\n    setAnimation(anime) {\r\n\r\n        this.animations['default'] = anime;\r\n\r\n        this.selected_animation = anime;\r\n\r\n        Quazar.log('declared default animation');\r\n\r\n        return this;\r\n\r\n    }\r\n\r\n    defaultAnimation(anime) {\r\n\r\n        this.animations['default'] = anime;\r\n\r\n        Quazar.log('declared default animation');\r\n\r\n        return this;\r\n\r\n    }\r\n\r\n\r\n    getImage(key) {\r\n        key = this.normalKey(key);\r\n\r\n        return this.images[key] || false;\r\n\r\n    }\r\n\r\n\r\n    getAnimation(key) {\r\n        key = this.normalKey(key);\r\n\r\n        return this.animations[key] || false;\r\n\r\n    }\r\n\r\n\r\n    add(objects) // add any object to the sprite\r\n    {\r\n\r\n        if (!objects instanceof Array) {\r\n            objects = [objects];\r\n\r\n        }\r\n        ;\r\n\r\n        let _inst = this;\r\n\r\n        Quazar.each(this.__collections, function (ic, coll) {\r\n\r\n            Quazar.each(objects, function (ix, obj) {\r\n\r\n                if (obj instanceof coll.__typeProfile.constructor) {\r\n                    coll.list.push(obj); //add the object to collection by class-type\r\n\r\n                }\r\n\r\n            });\r\n\r\n        });\r\n\r\n    }\r\n\r\n    fromFile(file_path)\r\n    {\r\n        var __inst = this;\r\n\r\n        $.getJSON(file_path, function(data){\r\n\r\n            __inst = new Sprite(data);\r\n\r\n        });\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n"]}